package main

import (
	"bufio"
	"flag"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/fatih/color"
)

/*
	IP_NOOB.go - –ø—Ä–æ—Å—Ç–æ–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤
	–Ω–∞–ø–∏—Å–∞–ª: burger
*/

/*
	\
*/

/*
–ù–∞—Å—Ç—Ä–æ–π–∫–∏
*/

var hosts []string // IP-–∞–¥—Ä–µ—Å–∞
var ports []string // –ü–æ—Ä—Ç—ã
var timeout = 1    // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (sec)

/*\
   \
	\
1.  |
	|
   /
*/

func is_valid(ip string, ports []string, wg *sync.WaitGroup) {
	defer wg.Done()

	for _, port := range ports {
		address := ip + ":" + port
		conn, err := net.DialTimeout("tcp", address, time.Duration(timeout)*time.Second)
		if err == nil {
			conn.Close()
			// —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
			names, err := net.LookupAddr(ip)
			if err != nil {
				color.Yellow("[?] -> IP: %s –ù–µ –∏–º–µ–µ—Ç –∏–º–µ–Ω–∏.", ip)
			}
			for _, name := range names {
				color.Green("[+] -> IP: %s | –ò–ú–Ø: %s", ip, name)
			}
			color.Green("[+] -> %s:%s - –ê–∫—Ç–∏–≤–Ω—ã–π.", ip, port)
			write("result", "["+ip+":"+port+"] - –ê–∫—Ç–∏–≤–Ω—ã–π ("+time.Now().Format("02-01-2006 15:04:05")+")")
		}
	}
}

/*
	|
*/

func manage_ip(ip net.IP) net.IP {
	for j := len(ip) - 1; j >= 0; j-- {
		if ip[j] < 255 {
			ip[j]++
			return ip
		}
		ip[j] = 0
	}
	return ip
}

/*
	|
*/

func read(filename string) []string {
	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
	fike, err := os.Open(filename)
	if err != nil {
		color.Red("[!] -> –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª '%s'", filename)
		color.Red("[!] -> –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª '%s'", filename)
		os.Exit(0)
	}
	defer fike.Close()

	// –ß–∏—Ç–µ–Ω–∏–µ
	var lines []string
	scanner := bufio.NewScanner(fike)
	for scanner.Scan() {
		if filename == "hosts" {
			if strings.Contains(scanner.Text(), "-") {
				line := strings.Split(scanner.Text(), "-")
				start_ip := net.ParseIP(line[0])
				end_ip := net.ParseIP(line[1])

				for ip := start_ip; !ip.Equal(end_ip); ip = manage_ip(ip) {
					lines = append(lines, ip.String())
				}
				lines = append(lines, string(end_ip))
			} else {
				lines = append(lines, scanner.Text())
			}
		} else if filename == "ports" {
			if strings.Contains(scanner.Text(), "-") {
				line := strings.Split(scanner.Text(), "-")
				start_p, err1 := strconv.Atoi(line[0])
				if err1 != nil {
					panic(err1)
				}
				end_p, err2 := strconv.Atoi(line[1])
				if err2 != nil {
					panic(err2)
				}

				for i := start_p; i < end_p+1; i++ {
					lines = append(lines, strconv.Itoa(i))
				}
			} else {
				lines = append(lines, scanner.Text())
			}
		}
	}

	return lines
}

/*
	\
*/

func write(filename string, text string) {
	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
	fike, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		color.Red("[!] -> –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª '%s'", filename)
		color.Red("[!] -> –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª '%s'", filename)
		os.Exit(0)
	}
	defer fike.Close()

	// –ó–∞–ø–∏—Å—å
	_, err = fike.WriteString(text + "\n")
	if err != nil {
		color.Red("[!] -> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
	}
}

/*
	|
*/

func printer_use(ip string, port string, text string) {
	/*
		PRINTER_USE - –æ—Ç–ø—Ä–∞–≤–∫–∞ TCP –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–µ—á–∞—Ç—å.
	*/
	conn, err := net.Dial("tcp", ip+":"+port)
	if err != nil {
		color.Red("[!] -> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.")
		panic(err)
	}
	defer conn.Close()

	_, err = conn.Write([]byte(text + "\n"))
	if err != nil {
		color.Red("[!] -> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.")
		panic(err)
	}

	color.Green("[+] -> –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
}

/*\
   \
	\
2.  |
	|
   /
*/

func main() {
	action := flag.String("action", "scan", "")
	flag.Parse()

	if *action == "scan" {
		// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		color.Blue("#| IP_NOOB.goüóø |#")
		color.Blue("–Ω–∞–ø–∏—Å–∞–ª: burger")
		color.Blue("")
		color.Blue("[/] -> –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")

		// –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ (–æ—á–∏—Å—Ç–∫–∞)
		_, err := os.Create("result")
		if err != nil {
			color.Red("[!] -> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª.")
		}
		hosts = read("hosts") // –∑–∞–≥—Ä—É–∑–∫–∞ IPs
		ports = read("ports") // –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—ã

		color.Green("[+] -> –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
		color.Blue("")
		color.Blue("[‚àö] -> –ù–∞–π–¥–µ–Ω–æ IP-–∞–¥—Ä–µ—Å–æ–≤: %d", len(hosts))
		color.Blue("[‚àö] -> –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d", len(ports))
		color.Blue("[‚àö] -> –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: %ds", timeout)
		color.White("–ù–∞–∂–º–∏—Ç–µ 'Enter' –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
		fmt.Scanln()

		// –†–∞–±–æ—Ç–∞
		var wg sync.WaitGroup
		for _, ip := range hosts {

			wg.Add(1)
			go is_valid(ip, ports, &wg)

		}

		wg.Wait()
	} else if *action == "printer" {
		var printer_ip string
		var printer_port string
		var send_text string
		var count int

		color.Blue("###| PRINTER_USEüñ® |###")
		color.White("–í–≤–µ–¥–∏—Ç–µ IP –ø—Ä–∏–Ω—Ç–µ—Ä–∞: ")
		fmt.Scanln(&printer_ip)

		color.White("–í–≤–µ–¥–∏—Ç–µ PORT –ø—Ä–∏–Ω—Ç–µ—Ä–∞: ")
		fmt.Scanln(&printer_port)

		color.White("–í–≤–µ–¥–∏—Ç–µ –¢–µ–∫—Å—Ç (—Ç–µ—Å—Ç): ")
		fmt.Scanln(&send_text)

		color.White("–°–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?: ")
		fmt.Scanln(&count)

		for i := 0; i < count; i++ {
			printer_use(printer_ip, printer_port, send_text)
		}
	}
}
